Here is a sketch of the solutions only.

==========
Question 1.
==========

Only (d) and (e) are correct. (a) is wrong because lists can actually be expanded (e.g., by using the append function), (b) is wrong since string search is not just for poems and advertisements, and (c) is wrong because it should be None instead of none.

==========
Question 2.
==========

i) C
ii) A
iii) D
iv) E
v) H

==========
Question 3.
==========

(a)
Both are able to store multiple values in a single variable, i.e., a collection of ordered objects with no restriction to uniqueness. Values within a tuple or list can be accessed using indices using the square bracket notation. Everything learned in tuples is applicable to list (i.e., comprehension, membership, etc.), the only exception is mutability. Tuples are immutable (cannot be changed once created) and lists are mutable (can be changed even after it is created). Because of this mutability property of lists, they are also known to be "unhashable" -- meaning that you cannot use lists as keys to a dictionary; meanwhile, tuples being immutable are hashable and can be keys to dictionaries.

(b)
Both remove() and discard() can be used to delete items from a set. However, discard() silently ignores the Key Error when trying to delete an item that does not exist in a set.

(c)
You can use it for catching exceptions. Here's when NOT to use it:
* incorrect file format
* typo errors
* misspelled commands
* numeric overflow/underflow

==========
Question 4.
==========

pattern = "[A-Z]{4}\\s\\d{3}"


==========
Question 5.
==========

This is the recursive version for the Collatz program (recall this program when it was first introduced during the topic on while loops)
So should print:
12
6
3
10
5
16
8
4
2
1


==========
Question 6.
==========

The 2D list can hold whatever numerical values and can be of any size, here's a sample:

L = [
    [1, 2, 3],
    [4, 5, 6]
]

So here's the iterative program:

def sum_of_all_paths(L):
    rows = len(L)
    cols = len(L[0])
    
    # Initialize a table with zeros
    table = [[0] * cols for _ in range(rows)]
    paths = [[0] * cols for _ in range(rows)]  
    
    # Base case
    table[0][0] = L[0][0]
    paths[0][0] = 1  
    
    for j in range(1, cols):
        table[0][j] = table[0][j - 1] + L[0][j] * paths[0][j - 1]
        paths[0][j] = paths[0][j - 1] 
    
    for i in range(1, rows):
        table[i][0] = table[i - 1][0] + L[i][0] * paths[i - 1][0]
        paths[i][0] = paths[i - 1][0]  
    
    for i in range(1, rows):
        for j in range(1, cols):
            paths[i][j] = paths[i - 1][j] + paths[i][j - 1]
            table[i][j] = table[i - 1][j] + table[i][j - 1] + L[i][j] * paths[i][j]
    
    return table[-1][-1]

L = [
    [1, 2, 3],
    [4, 5, 6]
]

result = sum_of_all_paths(L)
print("The sum of all possible path's values is:", result)





Here's the recursive version:

def sumPaths(L, i, j, current_sum):
    if i == len(L) - 1 and j == len(L[0]) - 1:
        return current_sum + L[i][j]
    
    sum_right = sum_down = 0
    
    if i < len(L) - 1:
        sum_down = sumPaths(L, i + 1, j, current_sum + L[i][j])
    
    if j < len(L[0]) - 1:
        sum_right = sumPaths(L, i, j + 1, current_sum + L[i][j])
    
    return sum_right + sum_down

def totalPathSums(L):
    return sumPaths(L, 0, 0, 0)

L = [
    [1, 2, 3],
    [4, 5, 6]
]

result = totalPathSums(L)
print("The sum of all possible path's values is:", result)